#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

[ -z "$MDSC_DETAIL" ] || echo "+ ImageInstall: library included" >&2

type DistroImage >/dev/null 2>&1 || \
	. "$MDLT_ORIGIN/myx/myx.distro-deploy/sh-lib/lib.distro-image.include"

# prints project merged provides that are prefixed 'image-install:' only, see DistroImageProjectProvidesMerged for full list
ImageInstallProjectProvidesMerged(){
	local MDSC_CMD='ImageInstallProjectProvidesMerged'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "$MDSC_CMD: ⛔ ERROR: project is not selected!" >&2
		set +e ; return 1
	fi

	DistroImageProjectProvidesMerged | grep -e "^\\S\\S* image-install:" | awk '!x[$0]++'
	return 0
	
	# Require ListProjectProvides
	# ListProjectProvides.fn.sh "$MDSC_PRJ_NAME" --merge-sequence | grep "^\\S\\S* image-install:"
	# ListProjectProvides.fn.sh "$MDSC_PRJ_NAME" --merge-sequence --filter-and-cut image-install # cuts "image-install:"
	
	DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
	grep -e "^$MDSC_PRJ_NAME \\S* image-install:" "$MDSC_IDAPRV_NAME" | cut -d" " -f2,3 | awk '!x[$0]++'
}

# prints actual project's sync tasks (image-install:deploy-sync-files:)
# format: "$deploySourcePath" "$targetHostPath"
ImageInstallProjectSyncTasks(){
	local MDSC_CMD='ImageInstallProjectSyncTasks'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "$MDSC_CMD: ⛔ ERROR: project is not selected!" >&2
		set +e ; return 1
	fi

	local declaredAt deploySourcePath targetHostPath
	ImageInstallProjectProvidesMerged \
	| grep " image-install:deploy-sync-files:" \
	| tr ':' ' ' | cut -d" " -f1,4- \
	| while read -r declaredAt deploySourcePath targetHostPath ; do
		[ -z "$MDSC_DETAIL" ] || echo "$MDSC_CMD: input: $declaredAt $deploySourcePath $targetHostPath" >&2
		local fileName="$MMDAPP/output/deploy/$MDSC_PRJ_NAME/sync/$deploySourcePath"
		if [ ! -d "$fileName" ] ; then
			echo "$MDSC_CMD: ⛔ ERROR: directory is missing: $fileName, declared at $declaredAt" >&2 
			set +e ; return 1
		fi
		
		echo "$deploySourcePath" "$targetHostPath"
	done \
	| awk '!x[$0]++' 

	return 0
}

# call with --prefix|--suffix|--source|--target argument
#
ImageInstallProjectDeployPatchScripts(){
	local MDSC_CMD='ImageInstallProjectDeployPatchScripts'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "$MDSC_CMD: ⛔ ERROR: project is not selected!" >&2
		set +e ; return 1
	fi
	case "$1" in
		--prefix)
			local filter="grep -e \" image-install:deploy-patch-script-prefix:\""
			local fields="declaredAt scriptSourceName scriptFile matchPath"
		;;
		--suffix)
			local filter="grep -e \" image-install:deploy-patch-script-suffix:\" -e \" image-install:deploy-patch-script:\""
			local fields="declaredAt scriptSourceName scriptFile matchPath"
		;;
		--source)
			local filter="grep -e \" image-install:source-patch-script:\""
			local fields="declaredAt matchPath scriptSourceName scriptFile"
		;;
		--target)
			local filter="grep -e \" image-install:target-patch-script:\""
			local fields="declaredAt scriptSourceName scriptFile matchPath"
		;;
		--commit)
			local filter="grep -e \" image-install:deploy-applied-script:\""
			local fields="declaredAt scriptSourceName scriptFile matchPath"
		;;
		*)
			echo "$MDSC_CMD: ⛔ ERROR: '--prefix', '--suffix', '--source' or '--target' must be chosen!" >&2
			set +e ; return 1
		;;
	esac

	local declaredAt scriptSourceName scriptFile matchPath
	ImageInstallProjectProvidesMerged \
	| eval $filter \
	| tr ':' ' ' | cut -d" " -f1,4- \
	| while read -r $fields ; do
		DistroImageCheckSourcePath --file "$declaredAt" "$scriptSourceName" "$scriptFile" "$matchPath" \
		| cut -d" " -f2-
	done \
	| awk '!x[$0]++'
	return 0
}

# main shell command
ImageInstall(){
	echo "Not Supported!" >&2
	set +e ; return 1
}
