[ -z "$MDSC_DETAIL" ] || echo "+ DistroImage: library included" >&2

# checks and updates MDSC_PRJ_NAME variable with project in focus
# $3 is empty or 'local' or 'export'
DistroSelectProject(){
	local MDSC_CMD='DistroSelectProject'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	if [ "$1" != "MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: env name required to be MDSC_PRJ_NAME!" >&2
		return 1
	fi
	if [ -z "$2" ] ; then
		echo "ERROR: $MDSC_CMD: project name required!" >&2
		return 1
	fi
	if [ "$2" = "$MDSC_PRJ_NAME" ] ; then
		[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: same project ($2)" >&2
		return 0
	fi
	if [ "$2" = "--reset" ] ; then
		if [ -z "$MDSC_PRJ_NAME" ] ; then
			[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: already clean" >&2
			return 0
		fi
		[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: reset project (previous selection: $MDSC_PRJ_NAME)" >&2
		export MDSC_PRJ_NAME=""
		# export MDSC_PRJ_MPRV=""
		# export MDSC_PRJ_BSEQ=""
		return 0
	fi
	case "$3" in
		export)
			export MDSC_PRJ_NAME="$2"
			# export MDSC_PRJ_MPRV=""
			# export MDSC_PRJ_BSEQ=""
			[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: project selected and exported ($2)" >&2
			return 0
		;;
		'')
			MDSC_PRJ_NAME="$2"
			# MDSC_PRJ_MPRV=""
			# MDSC_PRJ_BSEQ=""
			[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: project selected ($2)" >&2
			return 0
		;;
		*)
			echo "ERROR: $MDSC_CMD: invalid extra option: $3" >&2
			return 1
		;;
	esac
}

#
#
DistroListSshTargets(){
	echo "Not Implemented!" >&2
}

#
#
DistroSshConnect(){
	local MDSC_CMD='DistroSshConnect'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local useSshHost=""
	local useSshPort=""
	local useSshUser=""
	local useSshHome=""

	while true ; do
		case "$1" in
			--ssh-name|--ssh-host|--ssh-port|--ssh-user|--ssh-home)
				DistroImageParseSshOptions "$1" "$2"
				shift ; shift
			;;
			--ssh-*)
				echo "ERROR: $MDSC_CMD: invalid --ssh-XXXX option: $1" >&2
				return 1
			;;
			*)
				break
			;;
		esac
	done

	local extraArguments="$@"
	if [ -z "$useSshHome" ] ; then
		useSshHome="$( echo ~/.ssh )"
	elif [ "$useSshHome" = "${useSshHome#'/'}" ] ; then
		useSshHome="$MMDAPP/source/${useSshHome#$MMDAPP/source/}"
	fi
	if [ -z "$useSshUser" ] ; then
		useSshUser="$( whoami )"
	fi

	eval "$(
		if true ; then
			if [ ! -d "$useSshHome" ] ; then
				echo "ERROR: $MDSC_CMD: ssh home directory does not exist: $useSshHome" >&2
				return 1
			fi
	
			[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: client spec parsed: $useSshUser $useSshHome" >&2
			
			local sshConfig="$useSshHome/config-dummy.txt"
			if [ -f "$sshConfig" ] ; then
				sshConfig=" -F $sshConfig"
			else
				sshConfig=""
			fi
			
			local sshSecret="$useSshHome/client.rsa"
			if [ -f "$sshSecret" ] ; then
				if [ -O "$sshSecret" ] ; then
					chmod 600 "$sshSecret"
				fi
				sshSecret=" -o PreferredAuthentications=publickey -i $sshSecret"
			else
				sshSecret=""
			fi

			local sshHosts="$useSshHome/known_hosts" 
			if [ -f "$sshHosts" ] ; then
				sshHosts=" -o UserKnownHostsFile=$sshHosts"
			else
				sshHosts=""
			fi
			
			printf 'ssh %s -p %s -l %s %s %s %s %s %s\n' \
				"$useSshHost" \
				"$useSshPort" \
				"$useSshUser" \
				"-o ConnectTimeout=10" \
				"$sshHosts" \
				"$sshConfig" \
				"$sshSecret" \
				"$extraArguments"
		fi \
		| sed -e 's|^ *||g' -e 's| *$||g' -e 's|  | |g'
	)"
	
}

#
#
DistroImageParseSshOptions(){
	[ -z "$MDSC_DETAIL" ] || echo "+ DistroImageParseSshOptions: $@" >&2
	while true ; do
		case "$1" in
			--ssh-name) # for prefix only, yet
				shift ; shift
			;;
			--ssh-host)
				shift ; useSshHost="$1" ; shift
			;;
			--ssh-port)
				shift ; useSshPort="$1" ; shift
			;;
			--ssh-user)
				shift ; useSshUser="$1" ; shift
			;;
			--ssh-home)
				shift ; useSshHome="${1#$MMDAPP/source/}" ; shift
			;;
			*)
				break
			;;
		esac
	done
	return 0
}

# prints ssh options as argument list (--ssh-host ...)
#
DistroImageProjectSshTargets(){
	local MDSC_CMD='DistroImageProjectSshTargets'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	local useSshHost="${useSshHost:-}"
	local useSshPort="${useSshPort:-}"
	local useSshUser="${useSshUser:-}"
	local useSshHome="${useSshHome:-}"
	local linePrefix=""
	local lineSuffix=""
	
	while true ; do
		case "$1" in
			--project)
				shift ; DistroSelectProject MDSC_PRJ_NAME "$1" ; shift
			;;
			--no-cache)
				shift ; local useNoCache="--no-cache"
			;;
			--no-index)
				shift ; local useNoIndex="--no-index"
			;;
			--ssh-host|--ssh-port|--ssh-user|--ssh-home)
				DistroImageParseSshOptions "$1" "$2"
				shift ; shift
			;;
			--line-prefix)
				shift ; linePrefix="$1" ; shift
			;;
			--line-suffix)
				shift ; lineSuffix="$1" ; shift
			;;
			*)
				break
			;;
		esac
	done

	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	
	local argument
	local extraArguments="$( for argument in "$@" ; do printf '%q ' "$argument" ; done )"
	local sshTarget

	local setSshHost="${useSshHost:-}"
	local setSshPort="${useSshPort:-}"
	local setSshUser="${useSshUser:-}"
	local setSshHome="${useSshHome:-}"

	local sshName sshHost sshPort sshUser sshHome sshSpec clientSpec
	
	DistroImageEnsureProvidesOwnedFile MDSC_IDOPRV_NAME
	grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDOPRV_NAME" | cut -d" " -f2 | grep '^deploy-ssh-target:' | sed 's|^deploy-ssh-target:||' | awk '!x[$0]++' \
	| while read -r sshTarget ; do
	
		[ -z "$MDSC_DETAIL" ] || echo "+ $MDSC_CMD: ssh target: $sshTarget" >&2
		
		sshSpec="$( echo "$sshTarget" | sed 's,^.*@,,' )"
		sshUser="${sshTarget%${sshTarget%@$sshSpec}}"
		sshName="$( echo "$sshSpec" | sed 's,:.*$,,' )"
		sshPort="$( echo "$sshSpec" | sed 's,^.*:,,' )"
		
		useSshHost="${setSshHost:-$sshName}"
		useSshPort="${setSshPort:-$sshPort}"
		useSshUser="${setSshUser:-$sshUser}"
		useSshHome="$setSshHome"

		DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
			
		while read -r clientSpec; do
			[ -z "$MDSC_DETAIL" ] || echo "+ $MDSC_CMD: ssh options: $clientSpec" >&2
			DistroImageParseSshOptions $clientSpec
		done <<< "$( \
			grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDAPRV_NAME" | cut -d" " -f3 \
			| grep '^deploy-ssh-client-settings:' \
			| sed 's|^deploy-ssh-client-settings:||' \
			| tr ':' ' ' \
		)"

		sshHost="${setSshHost:-$useSshHost}"
		sshPort="${setSshPort:-$useSshPort}"
		sshHome="${setSshHome:-$useSshHome}"
		sshUser="${setSshUser:-$useSshUser}"
		
		if [ "$sshHost" != "$sshName" ] ; then
			linePrefix="$linePrefix --ssh-name $( printf '%q' "$sshName" )"
		fi

		if [ -z "$sshHome" ] ; then
			sshHome="$( echo ~/.ssh )"
		fi

		printf '%s --ssh-host %q --ssh-port %s --ssh-user %q --ssh-home %q %s%s\n' \
			"$linePrefix" \
			"$sshHost" \
			"$sshPort" \
			"$sshUser" \
			"$sshHome" \
			"$extraArguments" \
			"$lineSuffix"
			
		continue
		
	done \
	| sed -e 's|^ *||g' -e 's| *$||g' -e 's|  | |g'
	
	return 0
	# DistroListSshTargets --select-projects "$MDSC_PRJ_NAME" "${1:'--print-table'}" "$@"
}

# prints project merged provides
DistroImageProjectProvidesMerged(){
	local MDSC_CMD='DistroImageProjectProvidesMerged'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	#if [ ! -z "${MDSC_PRJ_MPRV:0:1}" ] ; then
	#	echo "$MDSC_PRJ_MPRV"
	#	return 0
	#fi
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	local checkFile="$MDSC_CACHED/distro-provides.txt"
	local cacheFile="$MDSC_CACHED/$MDSC_PRJ_NAME/project-provides-merged.txt"
	if [ -f "$checkFile" ] ; then
		if [ -f "$cacheFile" ] ; then
			# remake if it is too young (re: one second precision of -nt)
			if [ "$cacheFile" -nt "$checkFile" ] ; then
				cat "$cacheFile"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
		grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDAPRV_NAME" | cut -d" " -f2,3 | awk '!x[$0]++' | tee "$cacheFile"
		return 0
	fi
	
	echo "ERROR: $MDSC_CMD: can't come up with a name" >&2
	return 1
}

DistroImageProjectSequence(){
	local MDSC_CMD='DistroImageProjectSequence'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	while true ; do	
		case "$1" in
			--project)
				shift ; local MDSC_PRJ_NAME="$1" ; shift ; continue ;;
			*)
				break ;;
		esac
	done

	#if [ ! -z "${MDSC_PRJ_BSEQ:0:1}" ] ; then
	#	echo "$MDSC_PRJ_BSEQ"
	#	return 0
	#fi
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	local checkFile="$MDSC_CACHED/distro-provides.txt"
	local cacheFile="$MDSC_CACHED/$MDSC_PRJ_NAME/project-build-sequence.txt"
	if [ -f "$checkFile" ] ; then
		if [ -f "$cacheFile" ] ; then
			# remake if it is too young (re: one second precision of -nt)
			if [ "$cacheFile" -nt "$checkFile" ] ; then
				cat "$cacheFile"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
		grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDAPRV_NAME" | cut -d" " -f2 | awk '!x[$0]++' | tee "$cacheFile"
		return 0
	fi
	
	# Require ListProjectSequence
	# ListProjectSequence "$MDSC_PRJ_NAME"
	
	echo "ERROR: $MDSC_CMD: can't come up with a name" >&2
	return 1
}

# sets MDSC_IDAPRV_NAME variable to all merged provides table file name
DistroImageEnsureProvidesMergedFile(){
	local MDSC_CMD='DistroImageEnsureProvidesMergedFile'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	if [ "$1" != "MDSC_IDAPRV_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: env name required to be MDSC_IDAPRV_NAME" >&2
		return 1
	fi
	if [ ! -z "${MDSC_IDAPRV_NAME:0:1}" ] ; then
		[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: using env-cached ($MDSC_OPTION)" >&2
		return 0
	fi
	local checkFile="$MDSC_CACHED/distro-provides.txt"
	local cacheFile="$MDSC_CACHED/distro-merged-provides.txt"
	if [ -f "$checkFile" ] ; then
		if [ -f "$cacheFile" ] ; then
			# remake if it is too young (re: one second precision of -nt)
			if [ "$cacheFile" -nt "$checkFile" ] ; then
				MDSC_IDAPRV_NAME="$cacheFile"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		Require ListDistroProvides
		MDSC_IDAPRV_NAME="$cacheFile"
		ListDistroProvides --explicit-noop --no-cache --all-provides-merged > "$MDSC_IDAPRV_NAME.tmp"
		mv -f "$MDSC_IDAPRV_NAME.tmp" "$MDSC_IDAPRV_NAME"
		return 0
	fi
	
	echo "ERROR: $MDSC_CMD: can't come up with a name" >&2
	return 1
}

# sets MDSC_IDOPRV_NAME variable to all merged provides table file name
DistroImageEnsureProvidesOwnedFile(){
	local MDSC_CMD='DistroImageEnsureProvidesOwnedFile'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	if [ "$1" != "MDSC_IDOPRV_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: env name required to be MDSC_IDOPRV_NAME" >&2
		return 1
	fi
	if [ ! -z "${MDSC_IDOPRV_NAME:0:1}" ] ; then
		[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: using env-cached ($MDSC_OPTION)" >&2
		return 0
	fi
	local checkFile="$MDSC_CACHED/distro-index.inf"
	local cacheFile="$MDSC_CACHED/distro-provides.txt"
	if [ -f "$checkFile" ] ; then
		if [ -f "$cacheFile" ] ; then
			if [ "$( date -u -r "$checkFile" "+%Y%m%d%H%M%S" )" -lt "$( date -u -r "$cacheFile" "+%Y%m%d%H%M%S" )" ] ; then
				MDSC_IDOPRV_NAME="$cacheFile"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		Require ListDistroProvides
		MDSC_IDOPRV_NAME="$cacheFile"
		ListDistroProvides --explicit-noop --all-provides > "$MDSC_IDOPRV_NAME.tmp"
		mv -f "$MDSC_IDOPRV_NAME.tmp" "$MDSC_IDOPRV_NAME"
		return 0
	fi
	
	echo "ERROR: $MDSC_CMD: can't come up with a name" >&2
	return 1
}

# echoes none/all matching deploy output folders or files
# !!!arguments: --path/--file declaredAt sourceName sourcePath <extraArguments>
# !!!output: declaredAt sourceName sourcePath <extraArguments>
DistroImageCheckOutputPath(){
	local MDSC_CMD='DistroImageCheckOutputPath'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	while true ; do	
		case "$1" in
			--project)
				shift ; local MDSC_PRJ_NAME="$1" ; shift ; continue ;;
			--path)
				shift ;	local check="-d" ; continue ;;
			--file)
				shift ;	local check="-f" ; continue ;;
			*)
				break ;;
		esac
	done

	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	
	!!!
	
	return 0
}

#
# call with --install|--prepare [--export|--local] argument
DistroImageProjectContextVariables(){
	local MDSC_CMD='DistroImageProjectContextVariables'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "$MDSC_CMD: ERROR: project is not selected!" >&2
		return 1
	fi

	local prefix="" filter=""

	while true ; do 
		case "$1" in
			--install)
				shift
				filter="grep -e \" image-install:context-variable:\""
			;;
			--prepare)
				shift
				filter="grep -e \" image-prepare:context-variable:\""
			;;
			--export)
				prefix="export " ; shift
			;;
			--local)
				prefix="local " ; shift
			;;
			'')
				break
			;;
			*)
				echo "$MDSC_CMD: ERROR: Invalid option: $1" >&2
				return 1
			;;
		esac
	done

	local variableName operationType variableValue

	local buildBuffer="`
		DistroImageProjectProvidesMerged \
		| eval $filter \
		| tr ':' ' ' | cut -d" " -f4- \
		| while read -r variableName operationType variableValue ; do
			[ -z "$MDSC_DETAIL" ] || echo "$MDSC_CMD: input: $variableName $operationType $variableValue" >&2
			printf ' ## %s\n' "$variableName"
			case "$operationType" in
			
				# if variable is not defined - creates variable/array with given value 
				create)
					printf	'if [ -z "$VAR_%s" ] ; then\n' 			"$variableName"
					printf 		'VAR_%s=%q\n' 						"$variableName" "$variableValue"
					printf	'fi\n'
				;;
				
				# if variable is defined - sets it's value to given one
				change)
					printf '[ -z "$VAR_%s" ] || VAR_%s=%q # %s\n' \
						"$variableName" "$variableName" "$variableValue" "$variableName"
				;;
				
				# if variable is not defined - creates array with given value 
				# if variable is defined - ensures array contains given value 
				ensure|insert)
					printf	'if [ -z "$VAR_%s" ] ; then\n' 						"$variableName"
					printf 		'VAR_%s=%q\n' 									"$variableName" "$variableValue"
					printf	'else\n'
					printf 		'VAR_%s="$( printf '%s\n%s' $VAR_%s %q )"\n' 	"$variableName" "$variableName" "$variableValue"
					printf	'fi\n'
				;;
				
				# if variable is defined - ensures array contains given value 
				update)
					printf	'if [ ! -z "$VAR_%s" ] ; then\n' 					"$variableName"
					printf 		'VAR_%s="$( printf '%s\n%s' "$VAR_%s" %q )"\n' 	"$variableName" "%s" "%s" "$variableName" "$variableValue"
					printf	'fi\n'
				;;
				
				# if variable is defined - removes given value from array. Un-defines variable if no value given.
				remove)
					if [ -z "$variableValue" ] ; then
						printf 'VAR_%s=""\n' 									"$variableName"
					else
						printf	'if [ ! -z "$VAR_%s" ] ; then\n' 				"$variableName"
						printf 		'VAR_%s="$( echo "$VAR_%s" | grep -F -v %q )"\n' 	"$variableName" "$variableName" "$variableValue"
						printf	'fi\n'
					fi
				;;

				# if variable is not defined - creates variable with given value 
				# if variable is defined - sets variable to given value (same) 
				re-set|define|upsert)
					printf 'VAR_%s=%q\n' 									"$variableName" "$variableValue"
				;;
				
				# Un-defines variable. Only when variable value matches, if variableValue specified.
				delete)
					if [ -z "$variableValue" ] ; then
						printf 'VAR_%s=""\n' 								"$variableName"
					else
						printf '[ "%s" != "$VAR_%s" ] || VAR_%s=""\n' 		"$variableValue" "$variableName" "$variableName"
					fi
				;;
				
				*)
					echo "$MDSC_CMD: WARNING: unknown context variable operation: $operationType:$variableName:$variableValue" >&2
				;;
			esac
		done
	`"
	
	if [ -z "${buildBuffer:0:1}" ] ; then
		return 0
	fi
	
	local variableNames="$( echo "$buildBuffer" | grep -e '^ ## ' | sed -e 's|^.* \## ||g' | sort | uniq )"
	
	local buildBuffer="`
		for variableName in $variableNames ; do
			printf 'local VAR_%s\n' "$variableName"
		done
		echo "$buildBuffer"
		for variableName in $variableNames ; do
			printf 'printf %s %q %s\n' "'$prefix%s=%q\n'" "$variableName" "\\\$VAR_$variableName"
		done
	`"
	
	# hope for a new process
	echo | ( eval "$buildBuffer" )
	
	return 0
}

# echoes none/all matching deploy source folders or files
# arguments: --path/--file declaredAt sourceName sourcePath <extraArguments>
# output: declaredAt sourceName sourcePath <extraArguments>
DistroImageCheckSourcePath(){
	local MDSC_CMD='DistroImageCheckSourcePath'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	while true ; do	
		case "$1" in
			--project)
				shift ; local MDSC_PRJ_NAME="$1" ; shift ; continue ;;
			--path)
				shift ;	local check="-d" ; continue ;;
			--file)
				shift ;	local check="-f" ; continue ;;
			*)
				break ;;
		esac
	done

	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	
	local declaredAt="$1" ; shift
	local sourceName="$1" ; shift
	local sourcePath="$1" ; shift
	local checkProject

	if [ -z "$sourceName" ] ; then
		echo "ERROR: DistroImageCheckSourcePath: arguments missing" >&2
		return 1
	fi

	if [ "$sourceName" = "*" ] ; then
		local commandOutput="$( \
			DistroImageProjectSequence | while read -r checkProject ; do
				if [ $check "$MDSC_SOURCE/$checkProject/$sourcePath" ] ; then
					if DistroImageProjectSequence --project "$checkProject" | grep -q "$declaredAt" ; then
						echo "$declaredAt" "$checkProject" "$sourcePath" "$@"
					fi
				fi
			done \
		)"
	
		if [ ! -z "$commandOutput" ] ; then
			echo "$commandOutput"
			return 0
		fi
		
		echo "WARNING: DistroImageCheckSourcePath: wild-card path is not found: $declaredAt:$sourceName:$sourcePath" >&2
		return 1
	fi
	
	if [ "$sourceName" = "." ] ; then
		local sourceName="$declaredAt"
	fi
	
	if [ $check "$MDSC_SOURCE/$sourceName/$sourcePath" ] ; then
		echo "$declaredAt" "$sourceName" "$sourcePath" "$@"
		return 0
	fi

	DistroImageEnsureProvidesOwnedFile MDSC_IDOPRV_NAME
	local commandOutput="$( \
		grep " $sourceName$" "$MDSC_IDOPRV_NAME" | cut -d" " -f1 | awk '!x[$0]++' \
		| while read -r checkProject ; do
			if [ $check "$MDSC_SOURCE/$checkProject/$sourcePath" ] ; then
				echo "$declaredAt" "$checkProject" "$sourcePath" "$@"
			fi
		done \
	)"
	
	if [ ! -z "$commandOutput" ] ; then
		echo "$commandOutput"
		return 0
	fi
	
	echo "WARNING: DistroImageCheckSourcePath: explicitly declared path is not found: $declaredAt:$sourceName:$sourcePath" >&2
	return 1
}

# main shell command
DistroImage(){
	echo "Not Supported!" >&2
	return 1
}