[ -z "$MDSC_DETAIL" ] || echo "+ DistroImage: library included" >&2

# checks and updates MDSC_PRJ_NAME variable with project in focus
# $3 is empty or 'local' or 'export'
DistroSelectProject(){
	if [ "$1" != "MDSC_PRJ_NAME" ] ; then
		echo "ERROR: DistroSelectProject: env name required to be MDSC_PRJ_NAME!" >&2
		return 1
	fi
	if [ -z "$2" ] ; then
		echo "ERROR: DistroSelectProject: project name required!" >&2
		return 1
	fi
	if [ "$2" = "$MDSC_PRJ_NAME" ] ; then
		[ -z "$MDSC_DETAIL" ] || echo "* DistroSelectProject: same project ($2)" >&2
		return 0
	fi
	if [ "$2" = "--reset" ] ; then
		if [ -z "$MDSC_PRJ_NAME" ] ; then
			[ -z "$MDSC_DETAIL" ] || echo "* DistroSelectProject: already clean" >&2
			return 0
		fi
		[ -z "$MDSC_DETAIL" ] || echo "* DistroSelectProject: reset project (previous selection: $MDSC_PRJ_NAME)" >&2
		export MDSC_PRJ_NAME=""
		# export MDSC_PRJ_MPRV=""
		# export MDSC_PRJ_BSEQ=""
		return 0
	fi
	case "$3" in
		export)
			export MDSC_PRJ_NAME="$2"
			# export MDSC_PRJ_MPRV=""
			# export MDSC_PRJ_BSEQ=""
			[ -z "$MDSC_DETAIL" ] || echo "* DistroSelectProject: project selected and exported ($2)" >&2
			return 0
		;;
		'')
			MDSC_PRJ_NAME="$2"
			# MDSC_PRJ_MPRV=""
			# MDSC_PRJ_BSEQ=""
			[ -z "$MDSC_DETAIL" ] || echo "* DistroSelectProject: project selected ($2)" >&2
			return 0
		;;
		*)
			echo "ERROR: DistroSelectProject: invalid extra option: $3" >&2
			return 1
		;;
	esac
}

# prints project merged provides
DistroImageProjectProvidesMerged(){
	#if [ ! -z "${MDSC_PRJ_MPRV:0:1}" ] ; then
	#	echo "$MDSC_PRJ_MPRV"
	#	return 0
	#fi
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: DistroImageProjectProvidesMerged: project is not selected!" >&2
		return 1
	fi
	DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
	grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDAPRV_NAME" | cut -d" " -f2,3 | awk '!x[$0]++'
	return 0
}

DistroImageProjectSequence(){
	#if [ ! -z "${MDSC_PRJ_BSEQ:0:1}" ] ; then
	#	echo "$MDSC_PRJ_BSEQ"
	#	return 0
	#fi
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: DistroImageProjectSequence: project is not selected!" >&2
		return 1
	fi
	DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
	grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDAPRV_NAME" | cut -d" " -f2 | awk '!x[$0]++'
	return 0
}

# sets MDSC_IDAPRV_NAME variable to all merged provides table file name
DistroImageEnsureProvidesMergedFile(){
	if [ "$1" != "MDSC_IDAPRV_NAME" ] ; then
		echo "ERROR: DistroImageEnsureProvidesMergedFile: env name required to be MDSC_IDAPRV_NAME" >&2
		return 1
	fi
	if [ ! -z "${MDSC_IDAPRV_NAME:0:1}" ] ; then
		[ -z "$MDSC_DETAIL" ] || echo "| DistroImageEnsureProvidesMergedFile: using env-cached ($MDSC_OPTION)" >&2
		return 0
	fi
	if [ -f "$MDSC_CACHED/distro-provides.txt" ] ; then
		if [ -f "$MDSC_CACHED/distro-merged-provides.txt" ] ; then
			if [ "$( date -u -r "$MDSC_CACHED/distro-provides.txt" "+%Y%m%d%H%M%S" )" -lt "$( date -u -r "$MDSC_CACHED/distro-merged-provides.txt" "+%Y%m%d%H%M%S" )" ] ; then
				MDSC_IDAPRV_NAME="$MDSC_CACHED/distro-merged-provides.txt"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| DistroImageEnsureProvidesMergedFile: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| DistroImageEnsureProvidesMergedFile: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		Require ListDistroProvides
		MDSC_IDAPRV_NAME="$MDSC_CACHED/distro-merged-provides.txt"
		ListDistroProvides --explicit-noop --all-provides-merged > "$MDSC_IDAPRV_NAME.tmp"
		mv -f "$MDSC_IDAPRV_NAME.tmp" "$MDSC_IDAPRV_NAME"
		return 0
	fi
	
	echo "ERROR: DistroImageEnsureProvidesMergedFile: can't come up with a name" >&2
	return 1
}

DistroImageSelectProjectMerged(){
	echo "Not Implemented!" >&2
}

# echoes none/all matching deploy output folders or files
# !!!arguments: --path/--file declaredAt sourceName sourcePath <extraArguments>
# !!!output: declaredAt sourceName sourcePath <extraArguments>
DistroImageCheckOutputPath(){
	local MDSC_CMD='DistroImageCheckOutputPath'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	while true ; do	
		case "$1" in
			--project)
				shift ; local MDSC_PRJ_NAME="$1" ; shift ; continue ;;
			--path)
				shift ;	local check="-d" ; continue ;;
			--file)
				shift ;	local check="-f" ; continue ;;
			*)
				break ;;
		esac
	done

	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	
	!!!
	
	return 0
}

# echoes none/all matching deploy source folders or files
# arguments: --path/--file declaredAt sourceName sourcePath <extraArguments>
# output: declaredAt sourceName sourcePath <extraArguments>
DistroImageCheckSourcePath(){
	local MDSC_CMD='DistroImageCheckSourcePath'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	while true ; do	
		case "$1" in
			--project)
				shift ; local MDSC_PRJ_NAME="$1" ; shift ; continue ;;
			--path)
				shift ;	local check="-d" ; continue ;;
			--file)
				shift ;	local check="-f" ; continue ;;
			*)
				break ;;
		esac
	done

	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	
	local declaredAt="$1" ; shift
	local sourceName="$1" ; shift
	local sourcePath="$1" ; shift
	local checkProject

	if [ -z "$sourceName" ] ; then
		echo "ERROR: DistroImageCheckSourcePath: arguments missing" >&2
		return 1
	fi

	if [ "$sourceName" = "*" ] ; then
		local commandOutput="$( \
			Require ListProjectSequence
			ListProjectSequence "$MDSC_PRJ_NAME" | while read -r checkProject ; do
				if [ $check "$MDSC_SOURCE/$checkProject/$sourcePath" ] ; then
					if ListProjectSequence "$checkProject" | grep -q "$declaredAt" ; then
						echo "$declaredAt" "$checkProject" "$sourcePath" "$@"
					fi
				fi
			done \
		)"
	
		if [ ! -z "$commandOutput" ] ; then
			echo "$commandOutput"
			return 0
		fi
		
		echo "WARNING: DistroImageCheckSourcePath: wild-card path is not found: $declaredAt:$sourceName:$sourcePath" >&2
		return 1
	fi
	
	if [ "$sourceName" = "." ] ; then
		local sourceName="$declaredAt"
	fi
	
	if [ $check "$MDSC_SOURCE/$sourceName/$sourcePath" ] ; then
		echo "$declaredAt" "$sourceName" "$sourcePath" "$@"
		return 0
	fi

	local commandOutput="$( \
		DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
		cut -d" " -f2,3 "$MDSC_IDAPRV_NAME" | grep " $sourceName$" | cut -d" " -f1 | awk '!x[$0]++' \
		| while read -r checkProject ; do
			if [ $check "$MDSC_SOURCE/$checkProject/$sourcePath" ] ; then
				echo "$declaredAt" "$checkProject" "$sourcePath" "$@"
			fi
		done \
	)"
	
	if [ ! -z "$commandOutput" ] ; then
		echo "$commandOutput"
		return 0
	fi
	
	echo "WARNING: DistroImageCheckSourcePath: explicitly declared path is not found: $declaredAt:$sourceName:$sourcePath" >&2
	return 1
}

# main shell command
DistroImage(){
	echo "Not Supported!" >&2
	return 1
}