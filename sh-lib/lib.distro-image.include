[ -z "$MDSC_DETAIL" ] || echo "+ DistroImage: library included" >&2

# checks and updates MDSC_PRJ_NAME variable with project in focus
# $3 is empty or 'local' or 'export'
DistroSelectProject(){
	local MDSC_CMD='DistroSelectProject'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	if [ "$1" != "MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: env name required to be MDSC_PRJ_NAME!" >&2
		return 1
	fi
	if [ -z "$2" ] ; then
		echo "ERROR: $MDSC_CMD: project name required!" >&2
		return 1
	fi
	if [ "$2" = "$MDSC_PRJ_NAME" ] ; then
		[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: same project ($2)" >&2
		return 0
	fi
	if [ "$2" = "--reset" ] ; then
		if [ -z "$MDSC_PRJ_NAME" ] ; then
			[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: already clean" >&2
			return 0
		fi
		[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: reset project (previous selection: $MDSC_PRJ_NAME)" >&2
		export MDSC_PRJ_NAME=""
		# export MDSC_PRJ_MPRV=""
		# export MDSC_PRJ_BSEQ=""
		return 0
	fi
	case "$3" in
		export)
			export MDSC_PRJ_NAME="$2"
			# export MDSC_PRJ_MPRV=""
			# export MDSC_PRJ_BSEQ=""
			[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: project selected and exported ($2)" >&2
			return 0
		;;
		'')
			MDSC_PRJ_NAME="$2"
			# MDSC_PRJ_MPRV=""
			# MDSC_PRJ_BSEQ=""
			[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: project selected ($2)" >&2
			return 0
		;;
		*)
			echo "ERROR: $MDSC_CMD: invalid extra option: $3" >&2
			return 1
		;;
	esac
}

DistroListSshTargets(){
	echo "Not Implemented!" >&2
}

DistroImageParseSshOptions(){
	[ -z "$MDSC_DETAIL" ] || echo "+ DistroImageParseSshOptions: $@" >&2
	while true ; do
		case "$1" in
			--ssh-host)
				shift ; useSshHost="$1" ; shift
			;;
			--ssh-port)
				shift ; useSshPort="$1" ; shift
			;;
			--ssh-user)
				shift ; useSshUser="$1" ; shift
			;;
			--ssh-home)
				shift ; useSshHome="$MMDAPP/source/${1#$MMDAPP/source/}" ; shift
			;;
			*)
				break
			;;
		esac
	done
	return 0
}

DistroImageProjectSshTargets(){
	local MDSC_CMD='DistroImageProjectSshTargets'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	local useSshHost="${useSshHost:-}"
	local useSshPort="${useSshPort:-}"
	local useSshUser="${useSshUser:-}"
	local useSshHome="${useSshHome:-}"
	local linePrefix=""
	local lineSuffix=""
	local outputMode="deploy"
	
	while true ; do
		case "$1" in
			--project)
				shift ; DistroSelectProject MDSC_PRJ_NAME "$1" ; shift
			;;
			--no-cache)
				shift ; local useNoCache="--no-cache"
			;;
			--no-index)
				shift ; local useNoIndex="--no-index"
			;;
			--ssh-host|--ssh-port|--ssh-user|--ssh-home)
				DistroImageParseSshOptions "$1" "$2"
				shift ; shift
			;;
			--line-prefix)
				shift ; linePrefix="$1" ; shift
			;;
			--line-suffix)
				shift ; lineSuffix="$1" ; shift
			;;
			--print)
				shift ; outputMode="$1" ; shift
			;;
			--print-table-normal|--print-table-default|--print-normal|--print-deploy)
				shift ; outputMode="$1" ; outputMode="${outputMode#'--print-'}" ; shift
			;;
			*)
				break
			;;
		esac
	done

	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	
	local sshTarget

	DistroImageEnsureProvidesOwnedFile MDSC_IDOPRV_NAME
	grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDOPRV_NAME" | cut -d" " -f2 | grep '^deploy-ssh-target:' | sed 's|^deploy-ssh-target:||' | awk '!x[$0]++' \
	| while read -r sshTarget ; do
	
		[ -z "$MDSC_DETAIL" ] || echo "+ $MDSC_CMD: ssh target: $sshTarget" >&2
		
		local sshSpec="$( echo "$sshTarget" | sed 's,^.*@,,' )"
		
		if [ "simple" = "$outputMode" ] ; then
			local sshHome="$useSshHome"
			local sshUser="${useSshUser:-${sshTarget%${sshTarget%@$sshSpec}}}"
			local sshHost="${useSshHost:-$( echo "$sshSpec" | sed 's,:.*$,,' )}"
			local sshPort="${useSshPort:-$( echo "$sshSpec" | sed 's,^.*:,,' )}"

			printf '%s ssh %s -p %s %s%s\n' \
				"$linePrefix" \
				"$sshHost" \
				"$sshPort" \
				"$extraArguments" \
				"$lineSuffix"
			continue
		fi
		
		if [ "deploy" = "$outputMode" ] ; then
		
			local clientSpec

			local sshHost="${useSshHost:-$( echo "$sshSpec" | sed 's,:.*$,,' )}"
			local sshPort="${useSshPort:-$( echo "$sshSpec" | sed 's,^.*:,,' )}"
			
			local sshUser="${useSshUser:-${sshTarget%${sshTarget%@$sshSpec}}}"

			DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
				
			while read -r clientSpec; do
				[ -z "$MDSC_DETAIL" ] || echo "+ $MDSC_CMD: ssh options: $clientSpec" >&2
				DistroImageParseSshOptions $clientSpec
			done <<< "$( \
				grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDAPRV_NAME" | cut -d" " -f3 \
				| grep '^deploy-ssh-client-settings:' \
				| sed 's|^deploy-ssh-client-settings:||' \
				| tr ':' ' '
			)"

			local sshHome="$useSshHome"
			local sshUser="${sshUser:-${useSshUser}}"

			if [ -z "$sshHome" ] ; then
				sshHome="$( echo ~/.ssh )"
			fi

			if [ ! -d "$sshHome" ] ; then
				echo "ERROR: $MDSC_CMD: ssh home directory does not exist: $sshHome" >&2
				return 1
			fi

			[ -z "$MDSC_DETAIL" ] || echo "* $MDSC_CMD: client spec parsed: $sshUser $sshHome" >&2
			
			printf '%s ssh %s -p %s -l %s %s -o UserKnownHostsFile=%s -F %s -i %s %s%s\n' \
				"$linePrefix" \
				"$sshHost" \
				"$sshPort" \
				"${sshUser:-root}" \
				"-o ConnectTimeout=10 -o PreferredAuthentications=publickey" \
				"$sshHome/known_hosts" \
				"$sshHome/config-dummy.txt" \
				"$sshHome/client.rsa" \
				"$extraArguments" \
				"$lineSuffix"
			
			continue
			
		fi
		
	done \
	| sed -e 's|^ *||g' -e 's| *$||g'
	
	return 0
	# DistroListSshTargets --select-projects "$MDSC_PRJ_NAME" "${1:'--print-table'}" "$@"
}

# prints project merged provides
DistroImageProjectProvidesMerged(){
	local MDSC_CMD='DistroImageProjectProvidesMerged'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	#if [ ! -z "${MDSC_PRJ_MPRV:0:1}" ] ; then
	#	echo "$MDSC_PRJ_MPRV"
	#	return 0
	#fi
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	local checkFile="$MDSC_CACHED/distro-provides.txt"
	local cacheFile="$MDSC_CACHED/$MDSC_PRJ_NAME/project-provides-merged.txt"
	if [ -f "$checkFile" ] ; then
		if [ -f "$cacheFile" ] ; then
			if [ ! "$checkFile" -nt "$cacheFile" ] ; then
				cat "$cacheFile"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
		grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDAPRV_NAME" | cut -d" " -f2,3 | awk '!x[$0]++' | tee "$cacheFile"
		return 0
	fi
	
	echo "ERROR: $MDSC_CMD: can't come up with a name" >&2
	return 1
}

DistroImageProjectSequence(){
	local MDSC_CMD='DistroImageProjectSequence'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	while true ; do	
		case "$1" in
			--project)
				shift ; local MDSC_PRJ_NAME="$1" ; shift ; continue ;;
			*)
				break ;;
		esac
	done

	#if [ ! -z "${MDSC_PRJ_BSEQ:0:1}" ] ; then
	#	echo "$MDSC_PRJ_BSEQ"
	#	return 0
	#fi
	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	local checkFile="$MDSC_CACHED/distro-provides.txt"
	local cacheFile="$MDSC_CACHED/$MDSC_PRJ_NAME/project-build-sequence.txt"
	if [ -f "$checkFile" ] ; then
		if [ -f "$cacheFile" ] ; then
			if [ ! "$checkFile" -nt "$cacheFile" ] ; then
				cat "$cacheFile"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		DistroImageEnsureProvidesMergedFile MDSC_IDAPRV_NAME
		grep -e "^$MDSC_PRJ_NAME " < "$MDSC_IDAPRV_NAME" | cut -d" " -f2 | awk '!x[$0]++' | tee "$cacheFile"
		return 0
	fi
	
	# Require ListProjectSequence
	# ListProjectSequence "$MDSC_PRJ_NAME"
	
	echo "ERROR: $MDSC_CMD: can't come up with a name" >&2
	return 1
}

# sets MDSC_IDAPRV_NAME variable to all merged provides table file name
DistroImageEnsureProvidesMergedFile(){
	local MDSC_CMD='DistroImageEnsureProvidesMergedFile'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	if [ "$1" != "MDSC_IDAPRV_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: env name required to be MDSC_IDAPRV_NAME" >&2
		return 1
	fi
	if [ ! -z "${MDSC_IDAPRV_NAME:0:1}" ] ; then
		[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: using env-cached ($MDSC_OPTION)" >&2
		return 0
	fi
	local checkFile="$MDSC_CACHED/distro-provides.txt"
	local cacheFile="$MDSC_CACHED/distro-merged-provides.txt"
	if [ -f "$checkFile" ] ; then
		if [ -f "$cacheFile" ] ; then
			if [ ! "$checkFile" -nt "$cacheFile" ] ; then
				MDSC_IDAPRV_NAME="$cacheFile"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		Require ListDistroProvides
		MDSC_IDAPRV_NAME="$cacheFile"
		ListDistroProvides --explicit-noop --all-provides-merged > "$MDSC_IDAPRV_NAME.tmp"
		mv -f "$MDSC_IDAPRV_NAME.tmp" "$MDSC_IDAPRV_NAME"
		return 0
	fi
	
	echo "ERROR: $MDSC_CMD: can't come up with a name" >&2
	return 1
}

# sets MDSC_IDOPRV_NAME variable to all merged provides table file name
DistroImageEnsureProvidesOwnedFile(){
	local MDSC_CMD='DistroImageEnsureProvidesOwnedFile'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	if [ "$1" != "MDSC_IDOPRV_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: env name required to be MDSC_IDOPRV_NAME" >&2
		return 1
	fi
	if [ ! -z "${MDSC_IDOPRV_NAME:0:1}" ] ; then
		[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: using env-cached ($MDSC_OPTION)" >&2
		return 0
	fi
	local checkFile="$MDSC_CACHED/distro-index.inf"
	local cacheFile="$MDSC_CACHED/distro-provides.txt"
	if [ -f "$checkFile" ] ; then
		if [ -f "$cacheFile" ] ; then
			if [ "$( date -u -r "$checkFile" "+%Y%m%d%H%M%S" )" -lt "$( date -u -r "$cacheFile" "+%Y%m%d%H%M%S" )" ] ; then
				MDSC_IDOPRV_NAME="$cacheFile"
				return 0
			fi
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: stale index, making index file ($MDSC_OPTION)" >&2
		else
			[ -z "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: making index file ($MDSC_OPTION)" >&2
		fi
	
		set -e
		Require ListDistroProvides
		MDSC_IDOPRV_NAME="$cacheFile"
		ListDistroProvides --explicit-noop --all-provides > "$MDSC_IDOPRV_NAME.tmp"
		mv -f "$MDSC_IDOPRV_NAME.tmp" "$MDSC_IDOPRV_NAME"
		return 0
	fi
	
	echo "ERROR: $MDSC_CMD: can't come up with a name" >&2
	return 1
}

# echoes none/all matching deploy output folders or files
# !!!arguments: --path/--file declaredAt sourceName sourcePath <extraArguments>
# !!!output: declaredAt sourceName sourcePath <extraArguments>
DistroImageCheckOutputPath(){
	local MDSC_CMD='DistroImageCheckOutputPath'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	while true ; do	
		case "$1" in
			--project)
				shift ; local MDSC_PRJ_NAME="$1" ; shift ; continue ;;
			--path)
				shift ;	local check="-d" ; continue ;;
			--file)
				shift ;	local check="-f" ; continue ;;
			*)
				break ;;
		esac
	done

	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	
	!!!
	
	return 0
}

# echoes none/all matching deploy source folders or files
# arguments: --path/--file declaredAt sourceName sourcePath <extraArguments>
# output: declaredAt sourceName sourcePath <extraArguments>
DistroImageCheckSourcePath(){
	local MDSC_CMD='DistroImageCheckSourcePath'
	[ -z "$MDSC_DETAIL" ] || echo "> $MDSC_CMD $@" >&2

	local MDSC_PRJ_NAME="${MDSC_PRJ_NAME:-}"

	while true ; do	
		case "$1" in
			--project)
				shift ; local MDSC_PRJ_NAME="$1" ; shift ; continue ;;
			--path)
				shift ;	local check="-d" ; continue ;;
			--file)
				shift ;	local check="-f" ; continue ;;
			*)
				break ;;
		esac
	done

	if [ -z "$MDSC_PRJ_NAME" ] ; then
		echo "ERROR: $MDSC_CMD: project is not selected!" >&2
		return 1
	fi
	
	local declaredAt="$1" ; shift
	local sourceName="$1" ; shift
	local sourcePath="$1" ; shift
	local checkProject

	if [ -z "$sourceName" ] ; then
		echo "ERROR: DistroImageCheckSourcePath: arguments missing" >&2
		return 1
	fi

	if [ "$sourceName" = "*" ] ; then
		local commandOutput="$( \
			DistroImageProjectSequence | while read -r checkProject ; do
				if [ $check "$MDSC_SOURCE/$checkProject/$sourcePath" ] ; then
					if DistroImageProjectSequence --project "$checkProject" | grep -q "$declaredAt" ; then
						echo "$declaredAt" "$checkProject" "$sourcePath" "$@"
					fi
				fi
			done \
		)"
	
		if [ ! -z "$commandOutput" ] ; then
			echo "$commandOutput"
			return 0
		fi
		
		echo "WARNING: DistroImageCheckSourcePath: wild-card path is not found: $declaredAt:$sourceName:$sourcePath" >&2
		return 1
	fi
	
	if [ "$sourceName" = "." ] ; then
		local sourceName="$declaredAt"
	fi
	
	if [ $check "$MDSC_SOURCE/$sourceName/$sourcePath" ] ; then
		echo "$declaredAt" "$sourceName" "$sourcePath" "$@"
		return 0
	fi

	DistroImageEnsureProvidesOwnedFile MDSC_IDOPRV_NAME
	local commandOutput="$( \
		grep " $sourceName$" "$MDSC_IDOPRV_NAME" | cut -d" " -f1 | awk '!x[$0]++' \
		| while read -r checkProject ; do
			if [ $check "$MDSC_SOURCE/$checkProject/$sourcePath" ] ; then
				echo "$declaredAt" "$checkProject" "$sourcePath" "$@"
			fi
		done \
	)"
	
	if [ ! -z "$commandOutput" ] ; then
		echo "$commandOutput"
		return 0
	fi
	
	echo "WARNING: DistroImageCheckSourcePath: explicitly declared path is not found: $declaredAt:$sourceName:$sourcePath" >&2
	return 1
}

# main shell command
DistroImage(){
	echo "Not Supported!" >&2
	return 1
}