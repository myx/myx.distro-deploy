#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

echo "DeployConsole: Working in $MMDAPP" >&2
[ -f "$HOME/.bashrc" ] && . "$HOME/.bashrc" 

if [ -z "$MDLC_BIN" ] && [ -f "$MMDAPP/source/myx/myx.distro-deploy/sh-lib/console-deploy-bashrc.rc" ] ; then
	MDDC_BIN="${MDLC_BIN:-$MMDAPP/source}"
else
	MDDC_BIN="${MDLC_BIN:-$MMDAPP/.local}"
fi

export MDDC_BIN

export BASH_ENV="$MDDC_BIN/myx/myx.distro-deploy/sh-lib/console-deploy-bashrc.rc"

# search: 1) previous path; 2) distro deploy scripts; 3) distro source scripts.

if [ -x "$MDDC_BIN/myx/myx.common/os-myx.common/host/tarball/bin/myx.common" ] ; then
	PATH="$MDDC_BIN/myx/myx.common/os-myx.common/host/tarball/bin:$PATH"
fi

PATH=$(echo "$PATH" | sed -E "s|$MDDC_BIN/myx/myx.distro-\(source\|deploy\|remote\)/sh-scripts||g")
PATH+=":$MDDC_BIN/myx/myx.distro-deploy/sh-scripts"
PATH+=":$MDDC_BIN/myx/myx.distro-source/sh-scripts"

. "$MDDC_BIN/myx/myx.distro-deploy/sh-lib/DistroShellContext.include"
DistroShellContext --distro-from-output
#DistroShellContext --distro-from-distro
#DistroShellContext --distro-path-auto

# Action myx/yaumnrc/test-parser.url
# Action make-ws2017.sh

Action(){
	if [ -z "$1" ] || [ "$1" == "--help" ] ; then
		( . "$MDDC_BIN/myx/myx.distro-deploy/sh-lib/HelpConsoleAction.include" )
		set +e ; return 1
	fi
	local actionCommand="$1" ; shift
	case "$actionCommand" in
		*.sh)
			( \
				. "$MMDAPP/actions/$actionCommand" ; \
				echo "$actionCommand: finished." ; \
			)
		;;
		*.url)
			open "$MMDAPP/actions/$actionCommand"
		;;
		*)
			echo "Unknown Action Type, source:" >&2
			myx.common lib/prefix "    " cat "$MMDAPP/actions/$actionCommand"
	esac
}


Deploy(){
	case "$1" in
		''|--*)
			( . "$MDDC_BIN/myx/myx.distro-deploy/sh-lib/DistroDeployConsole.include" )
			set +e ; return 1
		;;
	esac

	local distroCommand="$1" ; shift
	if ! type "${distroCommand%.fn.sh}" >/dev/null 2>&1 ; then
		if [ ! -f "$MDDC_BIN/myx/myx.distro-deploy/sh-scripts/${distroCommand%.fn.sh}.fn.sh" ] ; then
			echo "ERROR: unknown command: ${distroCommand%.fn.sh}" >&2
			set +e ; return 1
		fi
		. "$MDDC_BIN/myx/myx.distro-deploy/sh-scripts/${distroCommand%.fn.sh}.fn.sh"
	fi

	set +e

	"${distroCommand%.fn.sh}" "$@" || {
		EXITCODE=$?
		echo "ERROR: exited with error status ($EXITCODE)" >&2
		set +e
		return $EXITCODE
	}
	return 0

	( "${distroCommand%.fn.sh}" "$@" ; ) || {
		EXITCODE=$?
		echo "ERROR: exited with error status ($EXITCODE)" >&2
		set +e
		return $EXITCODE
	}
}

if ! type Source >/dev/null 2>&1 ; then
	Source(){
		case "$1" in
			''|--*)
				( . "$MDDC_BIN/myx/myx.distro-source/sh-lib/DistroSourceConsole.include" )
				set +e ; return 1
			;;
		esac

		local distroCommand="$1" ; shift
		if ! type "${distroCommand%.fn.sh}" >/dev/null 2>&1 ; then
			if [ ! -f "$MDDC_BIN/myx/myx.distro-source/sh-scripts/${distroCommand%.fn.sh}.fn.sh" ] ; then
				echo "ERROR: unknown command: ${distroCommand%.fn.sh}" >&2
				set +e ; return 1
			fi
			. "$MDDC_BIN/myx/myx.distro-source/sh-scripts/${distroCommand%.fn.sh}.fn.sh"
		fi

		set +e

		"${distroCommand%.fn.sh}" "$@" || {
			EXITCODE=$?
			echo "ERROR: exited with error status ($EXITCODE)" >&2
			set +e
			return $EXITCODE
		}
		return 0

		( "${distroCommand%.fn.sh}" "$@" ; ) || {
			EXITCODE=$?
			echo "ERROR: exited with error status ($EXITCODE)" >&2
			set +e
			return $EXITCODE
		}
	}
fi

Help(){
	( . "$MDDC_BIN/myx/myx.distro-deploy/sh-lib/HelpDistroDeployConsole.include" )
	set +e ; return 1
}

consoleActionsCompletion()
{
	Require ListAllActions
	local PREFIX="$2"
	if [ -z "$PREFIX" ] ; then
		COMPREPLY=( $( ListAllActions --completion | sed 's!/.*!/!' | sort -u ) )
	else
		COMPREPLY=( $( ListAllActions --completion | grep "^$PREFIX" | sort -u ) )
	fi
}

complete -F consoleActionsCompletion "Action"

complete -W "\` Deploy --completion-all \`" ""
complete -W "\` Deploy --completion-all \`" "*"
complete -W "\` Deploy --completion-all \`" "which"
complete -W "\` Deploy --completion-require \`" "Require"

complete -W "\` Deploy --completion-distro \`" "Distro"

complete -W "\` Deploy --completion-deploy \`" "Deploy"
complete -W "\` Source --completion-source \`" "Source"

PS1="\` Deploy --shell-prompt \`: $PS1"
export PS1

if [ ! -z "$MDSC_PRJ_NAME" ] ; then
	DistroSelectProject MDSC_PRJ_NAME "$MDSC_PRJ_NAME"
	export MDSC_SELECT_PROJECTS="$MDSC_PRJ_NAME"
	cd "$MMDAPP/source/$MDSC_PRJ_NAME"
	echo "Console: Project Selected: $MDSC_PRJ_NAME" >&2
fi
